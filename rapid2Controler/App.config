<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="capi" type="ABB.Robotics.Controllers.ConfigurationHandler, ABB.Robotics.Controllers.PC" />
  </configSections>

  <capi>
    <!--
    This App.config file shows all settings used by PC SDK. 
    Besides the settings commented out, the values used is in this file are the same as the default value used when there is no configuration file used.
		You can use this file as a template for your own projects. 		
		-->

    <!-- 
    If there is a controller (robot system) on the network that you connect to often, you may want to use the <defaultSystem> tag.
    It has an id attribute containing a string embraced by curly brackets. It is the systemâ€™s globally unique identifier (GUID),
    which can be found in the system.guid file in the INTERNAL folder of the robot system.

    Example:
    <defaultSystem id="{469F56DF-938E-4B06-B036-AABBB3E61F83}" />

    Using this mechanism enables you to use the default constructor, new Controller(), to create a Controller object for the specified controller:
		-->
    <defaultSystem id="" />

    <!-- 
    The <defaultUser> tag holds information about user name, password and an optional application name for the default user.
    It is used by the UserInfo class to log on to a controller. If an application name is not supplied, the process name is used.    
		-->
    <defaultUser name="Default User" password="robotics" application=""/>

    <!-- 
    When mastership is requested in manual mode by a remote client such as RobotStudio or a PC SDK application, a dialog is launched
    on the FlexPendant asking the operator to confirm that mastership should be passed from the FlexPendant to a remote client.
    As long as there is no confirmation on the FlexPendant the PC SDK application is not given mastership. 
    The timeout parameter is the time in seconds that the PC SDK application will wait for someone to confirm remote access in the FlexPendant dialog.
    The cycle parameter is the time in milliseconds between poll calls from the PC SDK to check whether mastership has been granted.
		-->
    <rmmp cycle="500" timeout="65" />

    <!--
    You can configure the duration in milliseconds of a scan operation, and increase the value if netscanning fails.
    If you have a slow PC, the default value might need to be extended.        
		-->
    <discovery.networkscanner delay="200" />

    <!-- 
    Configures the behavior of the internal event server. 
    AsyncDelegate = the events will be raised using a async delegate callback and they will therefore reach the subscriber on any thread.
				  
    WindowDelegate = the events will be raised using a windows postback delegate object. This assumes that the subscribing thread has a window
    associated to it. (either through a Application.Run(), COM STA or any other message pump based technology. If no window exists subscriptions will fail.     
		-->
    <eventStrategy name="AsyncDelegate" />

    <!-- 
    Configures remote controllers to be added during a network scan, eg.

    <remoteControllers>
      <controller id="192.168.8.138" />
      <controller id="192.168.8.139" />
    </remoteControllers>
		-->

    <!--
    Configures the cleanup cycle for internal controller objects.
    attributes: timeout = timeout between cleanups, mS. A value of zero
    or less disables the cleanup.        
		-->
    <cleanupCycle timeout="120000" />

    <!--
    Set the TraceRobApi attribute to true to enable detailed logging of the communication between PC SDK and the IRC5 controller. This information shall be used only when contacting ABB technical support. 
    The format and content of the information may change without further notice.
    The System.Diagnostics.Trace class is used internally. This makes it possible to collect the traces using a trace listener. See <system.diagnostics> section below.
		-->
    <debug TraceRobApi="false" />
  </capi>

   <!-- 
    Uncomment this section to add a .NET trace listener that writes all traces to a text file.
    Please refer to the System.Diagnostics namespace on MSDN to learn more about collecting traces.

    <system.diagnostics>
      <trace autoflush="false" indentsize="4">
        <listeners>
          <add name="myTraceListener" type="System.Diagnostics.TextWriterTraceListener" initializeData="myPCSDKlogfile.log" />
        </listeners>
      </trace>
    </system.diagnostics>
    -->
</configuration>
